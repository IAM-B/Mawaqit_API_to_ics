[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mawaqit-api-to-ics"
version = "1.0.0"
description = "Générateur d'horaires de prières synchronisés avec Mawaqit et export ICS"
authors = [
    {name = "IAM-B", email = "salamualyk@pm.me"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["prayer", "mawaqit", "ics", "calendar", "flask"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Scheduling",
]

dependencies = [
    "Flask==3.1.1",
    "requests==2.32.4",
    "icalendar==6.3.1",
    "beautifulsoup4==4.13.4",
    "unidecode==1.4.0",
    "python-dotenv==1.1.1",
    "Jinja2==3.1.5",
    "markdown==3.8.2",
]

[project.optional-dependencies]
dev = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-mock",
    "ruff",
]
test = [
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-mock",
]

[project.scripts]
mawaqit-ics = "main:main"

[project.urls]
Homepage = "https://github.com/IAM-B/Mawaqit_API_to_ics"
Repository = "https://github.com/IAM-B/Mawaqit_API_to_ics"
Documentation = "https://github.com/IAM-B/Mawaqit_API_to_ics/blob/main/README.md"
Issues = "https://github.com/IAM-B/Mawaqit_API_to_ics/issues"

[tool.pytest.ini_options]
testpaths = ["tests/python"]
python_files = ["test_*.py"]
addopts = [
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov/python",
    "--maxfail=2",
    "--disable-warnings",
    "-v"
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes
# (déplacé dans [tool.ruff.lint])

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
select = ["E", "F", "I", "W", "B", "C4", "UP", "ARG", "SIM", "TCH", "TID", "Q", "RUF"]
ignore = ["E501", "E203"]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["app"]

[tool.hatch.build.targets.wheel]
packages = ["app"] 

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.3",
]
